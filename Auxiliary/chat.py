from Auxiliary.utils import *


# Custom functions for buttons
def delete_message(_, message_tg):
    Message.botDeleteMessage(message_tg)


def clear_next_step_handler(_, message_tg):
    bot.clear_step_handler_by_chat_id(
        message_tg.chat.id)  # –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º step_handler
    # –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —à–ª–æ –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏


def status_message(to_messages, message_tg):
    status = operations.get_status(message_tg.chat.id)
    if status is None or status == "base":
        return to_messages[0]
    elif status == "editor":
        return to_messages[1]
    elif status == "admin":
        return to_messages[2]


# # Check access

# # # Editor
def check_access_editor(to_messages, message_tg):
    if operations.get_status(message_tg.chat.id) in ("admin", "editor"):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç—É–ø–∞
        return to_messages[0]

    return to_messages[-1]


# # # Admin
def check_access_admin(to_messages, message_tg):
    if operations.get_status(message_tg.chat.id) == "admin":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç—É–ø–∞
        return to_messages[0]

    return to_messages[-1]


# Custom functions for messages

# # Contests

# # # Delete contest
def delete_contest_id(message_tg):
    botMessage = message_contest_delete_id.line(message_tg)
    bot.register_next_step_handler(botMessage, delete_contest_result(botMessage))
    return True


def delete_contest_result(botMessage):
    def wrapper(message_tg):
        nonlocal botMessage
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        id = message_tg.text.strip()
        if operations.get_contest(id) is None:
            message_contest_delete_fail.line(botMessage)
        else:
            operations.remove_contests(id)
            message_contest_delete_success.line(botMessage)

            from Auxiliary import contests
            for tense, lst in contests.storage.items():
                contests.update(lst, tense)

    return wrapper


# # # Add contest
def add_contest_name(message_tg):
    botMessage = message_contest_add_name.line(message_tg)
    bot.register_next_step_handler(botMessage, add_contest_date_start(botMessage))
    return True


def add_contest_date_start(botMessage):
    def wrapper(message_tg):
        nonlocal botMessage
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        name = message_tg.text.strip()
        botMessage = message_contest_add_date_start.line(botMessage)
        bot.register_next_step_handler(botMessage, add_contest_date_end(botMessage, name))

    return wrapper


def add_contest_date_end(botMessage, name):
    def wrapper(message_tg):
        nonlocal botMessage, name
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        date_start = message_tg.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—É—é –¥–∞—Ç—É
        try:
            date_start = operations.parser.parse(date_start).strftime('%Y-%m-%d')
        except:
            message_contest_add_error.line(botMessage)
            return None

        botMessage = message_contest_add_date_end.line(botMessage)
        bot.register_next_step_handler(botMessage, add_contest_link(botMessage, name, date_start))

    return wrapper


def add_contest_link(botMessage, name, date_start):
    def wrapper(message_tg):
        nonlocal botMessage, name, date_start
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        date_end = message_tg.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—É—é –¥–∞—Ç—É
        try:
            date_end = operations.parser.parse(date_end).strftime('%Y-%m-%d')
        except:
            message_contest_add_error.line(botMessage)
            return None

        botMessage = message_contest_add_link.line(botMessage)
        bot.register_next_step_handler(botMessage, add_contest_tags(botMessage, name, date_start, date_end))

    return wrapper


def add_contest_tags(botMessage, name, date_start, date_end):
    def wrapper(message_tg):
        nonlocal botMessage, name, date_start, date_end
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        link = message_tg.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É
        if not is_valid_url(link):
            message_contest_add_error.line(botMessage)
            return None

        botMessage = message_contest_add_tags.line(botMessage)
        bot.register_next_step_handler(botMessage, add_contest_comment(
            botMessage, name, date_start, date_end, link))

    return wrapper


def add_contest_comment(botMessage, name, date_start, date_end, link):
    def wrapper(message_tg):
        nonlocal botMessage, name, date_start, date_end, link
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        tags = list(map(str.strip, message_tg.text.lower().split(',')))

        # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ callback_data –Ω–∞ –¥–µ—Ñ–∏—Å
        name = name.replace('_', '-')
        date_start = date_start.replace('_', '-')
        date_end = date_end.replace('_', '-')
        link = link.replace('_', '-')
        tags = [tag.replace('_', '-') for tag in tags]

        message = Message("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–æ–Ω–∫—É—Ä—Å—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                          ((Button("üîú –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üîú",
                                   f"contest_skip_{name}_{date_start}_{date_end}_{link}_{';'.join(tags)}_add",
                                   func=clear_next_step_handler),), (button.cancel_edit_contest,),))
        botMessage = message.line(botMessage)
        bot.register_next_step_handler(botMessage, add_contest_confirm(
            botMessage, name, date_start, date_end, link, tags))

    return wrapper


def add_contest_confirm(botMessage, name, date_start, date_end, link, tags):
    def wrapper(message_tg):
        nonlocal botMessage, name, date_start, date_end, link, tags
        if message_tg is not None:
            Message.userSendLogger(message_tg)
            Message.botDeleteMessage(message_tg)

        comment = message_tg.text.strip() if message_tg is not None else None
        message = Message("<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ</b>:\n\n"
                          f"<b>–ö–æ–Ω–∫—É—Ä—Å</b>: <code>{name}</code>\n"
                          f"‚îú <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</b>: <code>{date_start} - {date_end}</code>\n"
                          f"‚îî <b>–ü—Ä–µ–¥–º–µ—Ç—ã</b>: <code>{', '.join(tags)}</code>\n" +
                          (f"\n_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {comment}_" if comment else ""),
                          ((button.cancel_edit_contest,
                            Button("‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úîÔ∏è",
                                   f"contest_confirm_{name}_{date_start}_{date_end}_{link}_"
                                   f"{';'.join(tags)}{f'_{comment}' if comment is not None else ''}_add")),
                           ))

        message.line(botMessage)

    return wrapper

# # News

# # # Delete news
def delete_news_id(message_tg):
    botMessage = message_news_delete_id.line(message_tg)
    bot.register_next_step_handler(botMessage, delete_news_result(botMessage))
    return True


def delete_news_result(botMessage):
    def wrapper(message_tg):
        nonlocal botMessage
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        id = message_tg.text.strip()
        if operations.get_news(id) is None:
            message_news_delete_fail.line(botMessage)
        else:
            operations.remove_news(id)
            message_news_delete_success.line(botMessage)

            from Auxiliary import news
            news.update(news.storage)

    return wrapper


# # # Add news
def add_news_name(message_tg):
    botMessage = message_news_add_name.line(message_tg)
    bot.register_next_step_handler(botMessage, add_news_description(botMessage))
    return True


def add_news_description(botMessage):
    def wrapper(message_tg):
        nonlocal botMessage
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        name = message_tg.text.strip()
        botMessage = message_contest_add_description.line(botMessage)
        bot.register_next_step_handler(botMessage, add_news_confirm(botMessage, name))

    return wrapper


def add_news_confirm(botMessage, name):
    def wrapper(message_tg):
        nonlocal botMessage, name
        if message_tg is not None:
            Message.userSendLogger(message_tg)
            Message.botDeleteMessage(message_tg)

        description = message_tg.text.strip()

        # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ callback_data –Ω–∞ –¥–µ—Ñ–∏—Å
        name = name.replace('_', '-')
        description = description.replace('_', '-')

        Message("<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ</b>:\n\n"
              f"<b>–ù–æ–≤–æ—Å—Ç—å</b>: <code>{name}</code>\n"
              f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: <code>{description}</code>\n",
              ((
                button.cancel_edit_news,
                Button("‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úîÔ∏è", f"news_confirm_{name}_{description}_add")),
               ),).line(botMessage)

    return wrapper

# # Admin panel

# # # Edit status
def edit_status(message_tg):
    botMessage = message_status_edit.line(message_tg)
    bot.register_next_step_handler(botMessage, status_choice(botMessage))
    return True


def status_choice(botMessage):
    def wrapper(message_tg):
        nonlocal botMessage
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        chat_id = message_tg.text.strip()
        message = Message("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                          (
                              (Button("Block", f"block_{chat_id}_edit-status"),
                               Button("Base", f"base_{chat_id}_edit-status")),

                              (Button("Editor", f"editor_{chat_id}_edit-status"),
                               Button("Admin", f"admin_{chat_id}_edit-status")),

                              (button.back_to_admin_panel,)
                          ))

        message.line(botMessage)

    return wrapper

# # # Find author

# # # # Contest
def find_author_contest(message_tg):
    botMessage = message_find_author_contest.line(message_tg)
    bot.register_next_step_handler(botMessage, find_contest_author_answer(botMessage))
    return True

def find_contest_author_answer(botMessage):
    def wrapper(message_tg):
        nonlocal botMessage
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        id = message_tg.text.strip()

        chat_id = operations.get_contest_author(id)
        username = operations.get_username(chat_id)

        message = Message(f"<u><b>–ê–≤—Ç–æ—Ä</b></u>:\n"
                          f"‚îú <b>Username</b>: @{username}\n"
                          f"‚îî <b>Chat_id</b>: <code>{chat_id}</code>",
                          ((button.back_to_admin_panel,),))

        message.line(botMessage)

    return wrapper

# # # # News
def find_author_news(message_tg):
    botMessage = message_find_author_news.line(message_tg)
    bot.register_next_step_handler(botMessage, find_news_author_answer(botMessage))
    return True

def find_news_author_answer(botMessage):
    def wrapper(message_tg):
        nonlocal botMessage
        Message.userSendLogger(message_tg)
        Message.botDeleteMessage(message_tg)

        id = message_tg.text.strip()

        chat_id = operations.get_news_author(id)
        username = operations.get_username(chat_id)

        message = Message(f"<u><b>–ê–≤—Ç–æ—Ä</b></u>:\n"
                          f"‚îú <b>Username</b>: @{username}\n"
                          f"‚îî <b>Chat_id</b>: <code>{chat_id}</code>",
                          ((button.back_to_admin_panel,),))

        message.line(botMessage)

    return wrapper

# Buttons
button = Button('', '')

# Contact
Button("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts")

# Start
Button("–ù–æ–≤–æ—Å—Ç–∏", "news_page")
Button("–ö–æ–Ω–∫—É—Ä—Å—ã", "contests")

# # Edit
Button("–ò–∑–º–µ–Ω–∏—Ç—å", "edit_contest", func=check_access_editor)
Button("–ò–∑–º–µ–Ω–∏—Ç—å", "edit_news", func=check_access_editor)

# Tense contest
Button("–ü—Ä–æ—à–µ–¥—à–∏–µ", "past_contests_page")
Button("–ò–¥—É—â–∏–µ", "present_contests_page")
Button("–ì—Ä—è–¥—É—â–∏–µ", "future_contests_page")

# Editor
Button("–£–¥–∞–ª–∏—Ç—å", "delete_contest", func=check_access_editor)
Button("–î–æ–±–∞–≤–∏—Ç—å", "add_contest", func=check_access_editor)

Button("–£–¥–∞–ª–∏—Ç—å", "delete_news", func=check_access_editor)
Button("–î–æ–±–∞–≤–∏—Ç—å", "add_news", func=check_access_editor)

# Admin
Button("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "admin_panel", func=check_access_admin)

Button("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "edit_status", func=check_access_admin)

Button("–£–∑–Ω–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", "find_author", func=check_access_admin)
Button("–ù–æ–≤–æ—Å—Ç–∏", "find_author_news", func=check_access_admin)
Button("–ö–æ–Ω–∫—É—Ä—Å–∞", "find_author_contest", func=check_access_admin)

Button("–†–∞—Å—Å—ã–ª–∫–∞", "mailing", func=check_access_admin)

# Back
Button("üîô –ù–∞–∑–∞–¥ üîô", "back_to_start", func=status_message)
Button("üîô –ù–∞–∑–∞–¥ üîô", "back_to_contests")
Button("üîô –ù–∞–∑–∞–¥ üîô", "back_to_edit_contest", func=check_access_editor)
Button("üîô –ù–∞–∑–∞–¥ üîô", "back_to_edit_news", func=check_access_editor)
Button("üîô –ù–∞–∑–∞–¥ üîô", "back_to_admin_panel", func=check_access_admin)

# Cancel / close
Button("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å ‚úñÔ∏è", "cancel_edit_contest", func=clear_next_step_handler)
Button("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å ‚úñÔ∏è", "cancel_edit_news", func=clear_next_step_handler)
Button("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å ‚úñÔ∏è", "cancel_admin_edit", func=clear_next_step_handler)
Button("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å ‚úñÔ∏è", "cancel_find_author", func=clear_next_step_handler)
Button("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å ‚úñÔ∏è", "close", func=delete_message)

# Messages
message_contacts = Message("<b>–ú–µ–Ω–µ–¥–∂–µ—Ä</b>: @Nadezda_Sibiri\n"
                           "<b>–ê–≤—Ç–æ—Ä –±–æ—Ç–∞</b>: @sefixnep",
                           ((button.close,),), 
                           button.contacts)

# Start
message_start = Message("<b>ID:</b> <code><ID></code>\n"
                        "<i>–ü—Ä–∏–≤–µ—Ç, <USERNAME>!</i>\n",
                        ((button.news_page, button.contests),),
                        button.back_to_start)

message_start_editor = Message("<b>ID:</b> <code><ID></code>\n"
                               "<i>–ü—Ä–∏–≤–µ—Ç, <USERNAME>!</i>\n"
                               "–í–∞—à–∞ —Ä–æ–ª—å: <b>–†–µ–¥–∞–∫—Ç–æ—Ä</b>",
                               ((button.news_page, button.contests),
                                (button.edit_news, button.edit_contest)),
                               button.back_to_start)

message_start_admin = Message("<b>ID:</b> <code><ID></code>\n"
                              "<i>–ü—Ä–∏–≤–µ—Ç, <USERNAME>!</i>\n"
                              "–í–∞—à–∞ —Ä–æ–ª—å: <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>",
                              ((button.news_page, button.contests),
                               (button.edit_news, button.edit_contest),
                               (button.admin_panel,)),
                              button.back_to_start)

# Contest
message_contest_tense = Message("–í—ã–±–µ—Ä–∏ —Å –∫–∞–∫–∏–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏ –∂–µ–ª–∞–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è:",
                                ((button.past_contests_page,
                                  button.present_contests_page,
                                  button.future_contests_page),
                                 (button.back_to_start,)),
                                button.contests, button.back_to_contests)

# # Edit
message_contest_edit = Message("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∫–æ–Ω–∫—É—Ä—Å–æ–º?",
                               ((button.delete_contest, button.add_contest), (button.back_to_start,)),
                               button.edit_contest, button.cancel_edit_contest, button.back_to_edit_contest)

# # # Delete
message_contest_delete_id = Message("–ù–∞–ø–∏—à–∏—Ç–µ ID –∫–æ–Ω–∫—É—Ä—Å–∞",
                                    ((button.cancel_edit_contest,),),
                                    button.delete_contest,
                                    func=delete_contest_id)

message_contest_delete_fail = Message("–ö–æ–Ω–∫—É—Ä—Å —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                      ((button.back_to_edit_contest,),))

message_contest_delete_success = Message("–ö–æ–Ω–∫—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                                         ((button.back_to_edit_contest,),))

# # # Add
message_contest_add_name = Message("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞: (–∑–∞–≥–æ–ª–æ–≤–æ–∫)",
                                   ((button.cancel_edit_contest,),),
                                   button.add_contest,
                                   func=add_contest_name)

message_contest_add_date_start = Message("–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ <b>–†–ï–ì–ò–°–¢–†–ê–¶–ò–ò</b> –∫–æ–Ω–∫—É—Ä—Å–∞ (–ü—Ä–∏–º–µ—Ä: 01.01.2000)",
                                         ((button.cancel_edit_contest,),))

message_contest_add_date_end = Message("–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ <b>–†–ï–ì–ò–°–¢–†–ê–¶–ò–ò</b> –∫–æ–Ω–∫—É—Ä—Å–∞ (–ü—Ä–∏–º–µ—Ä: 01.01.2000)",
                                       ((button.cancel_edit_contest,),))

message_contest_add_link = Message("–ù–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å (–ü—Ä–∏–º–µ—Ä: https://example.com/)",
                                   ((button.cancel_edit_contest,),))

message_contest_add_tags = Message("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–≥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ü—Ä–∏–º–µ—Ä: '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞')",
                                   ((button.cancel_edit_contest,),))

message_contest_add_success = Message("<b>–ö–æ–Ω–∫—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n",
                                      ((button.back_to_edit_contest,),))

message_contest_add_error = Message("<b>–û—à–∏–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>",
                                    ((button.back_to_edit_contest,),))

# News

# # Edit
message_news_edit = Message("<b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –Ω–æ–≤–æ—Å—Ç—å—é?</b>",
                            ((button.delete_news, button.add_news), (button.back_to_start,),),
                            button.edit_news, button.back_to_edit_news, button.cancel_edit_news)

# # # Delete news
message_news_delete_id = Message("–ù–∞–ø–∏—à–∏—Ç–µ ID –Ω–æ–≤–æ—Å—Ç–∏",
                              ((button.cancel_edit_news,),),
                              button.delete_news,
                              func=delete_news_id)

message_news_delete_fail = Message("–ù–æ–≤–æ—Å—Ç—å —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                                      ((button.back_to_edit_news,),))

message_news_delete_success = Message("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                                         ((button.back_to_edit_news,),))

# # # Add
message_news_add_name = Message("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: (–∑–∞–≥–æ–ª–æ–≤–æ–∫)",
                                   ((button.cancel_edit_news,),),
                                   button.add_news,
                                   func=add_news_name)

message_contest_add_description = Message("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç)",
                                         ((button.cancel_edit_news,),))

message_news_add_success = Message("<b>–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n",
                                   ((button.back_to_edit_news,),))

message_news_add_error = Message("<b>–û—à–∏–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>",
                                 ((button.back_to_edit_news,),))

# Admin panel
message_admin_panel = Message("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                              (
                                  (button.edit_status,),
                                  (button.find_author,),
                                  (button.back_to_start,)
                              ),
                              button.admin_panel, button.cancel_admin_edit, button.back_to_admin_panel,
                              button.cancel_find_author)

# # Edit status
message_status_edit = Message("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                              ((button.cancel_admin_edit,),),
                              button.edit_status,
                              func=edit_status)

message_status_edit_success = Message("<b>–°—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω!</b>", ((button.back_to_start,),))

# # Find author
message_find_author = Message("–ê–≤—Ç–æ—Ä–∞ —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?",
                              ((button.find_author_news, button.find_author_contest),
                               (button.back_to_admin_panel,)),
                              button.find_author,)

message_find_author_contest = Message("–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∫–æ–Ω–∫—É—Ä—Å–∞:", ((button.cancel_find_author,),),
                                      button.find_author_contest, func=find_author_contest)

message_find_author_news = Message("–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –Ω–æ–≤–æ—Å—Ç–∏:", ((button.cancel_find_author,),),
                                      button.find_author_news, func=find_author_news)

# Access
message_no_access = Message("<b>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø!</b>",
                            ((button.back_to_start,),),
                            button.edit_news, button.edit_contest, button.admin_panel,
                            button.delete_news, button.add_news,
                            button.delete_contest, button.add_contest,
                            button.find_author, button.edit_status,
                            button.find_author_news, button.find_author_contest,
                            button.back_to_edit_news, button.back_to_edit_contest, button.back_to_admin_panel,
                            button.mailing
                            )

message_block = Message("<b>ID:</b> <code><ID></code>\n"
                        "<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>\n"
                        "<i>–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–∫–∏ /contacts</i>",
                        ((button.close,),))
